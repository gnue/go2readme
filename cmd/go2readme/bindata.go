// Code generated by go-bindata.
// sources:
// assets/README.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x91\xb1\x6e\xc3\x30\x0c\x44\x77\x7d\x05\x61\x77\x2a\x60\x17\xe8\x2f\xa4\x1d\xb2\xb4\x59\xba\x9b\x8d\x54\xc5\x80\x24\x1a\x96\x02\xb4\x08\xf2\xef\x15\x29\xdb\xb1\xe1\x51\x87\x77\xe4\x1d\x55\xc3\xed\x06\xed\x07\x7a\x03\xf7\xbb\x52\xfc\x78\x33\xf1\x3c\xf6\x43\xea\x29\x88\x56\xd7\x70\x0c\x31\xa1\x73\xc8\x9a\x52\x5d\xd7\xc5\x8b\x7a\x02\x4b\x60\x4d\x92\x01\x47\x3f\xd0\x98\x4e\x98\x2e\x6c\xc9\x80\xd8\xbe\x22\x5a\xc3\x43\xfb\x9f\x8c\xc4\x03\x79\x8f\x41\x43\x33\x21\x6c\x14\x04\x16\xa1\x01\xe3\xa2\x99\x09\x4b\xaa\x97\xc1\x50\xed\x96\x54\x0f\x47\xd0\x19\x2f\x4b\xde\x7f\xd1\x0f\xce\xc4\x2c\xe4\xfd\xf3\x8b\x23\x8c\x18\xf2\xa2\x05\x90\x15\xc5\x23\xe5\x1b\x71\x6c\xaf\xf1\x18\x3e\x91\x27\x87\x7f\xab\x6c\xcc\x8a\xb4\xc4\x67\xe8\xf3\x9a\x86\x6b\xda\x94\x9c\xa4\x75\xcb\x29\xf3\xae\x2f\xe3\x07\xd2\xab\x93\xcc\x68\xfe\x18\x3a\x97\x58\x2b\xf7\x1c\xaf\x81\x52\xd0\x3a\xfa\x86\xaa\xb5\xf4\x3a\x1a\xd4\xde\xbc\x3c\xb7\x5e\x57\xa5\x6b\x39\x65\xbb\xb1\xfe\x07\x00\x00\xff\xff\x89\x29\xa5\x2b\x00\x02\x00\x00")

func assetsReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_assetsReadmeMd,
		"assets/README.md",
	)
}

func assetsReadmeMd() (*asset, error) {
	bytes, err := assetsReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/README.md", size: 512, mode: os.FileMode(420), modTime: time.Unix(1502369982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/README.md": assetsReadmeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{assetsReadmeMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
